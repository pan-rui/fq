<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-autowire="byName">
    <import resource="classpath*:data.xml"/>
    <context:component-scan base-package="com.hy.aspect,com.hy.security"/>
    <!-- 缓存管理器 -->
    <bean id="shiroCahe" class="com.hy.security.ShiroCacheManager">
        <property name="redisCacheManager" ref="cacheManager"/>
        <property name="authorCacheName" value="#{config['AUTHOR_CACHE_NAME']}"/>
    </bean>
    <!-- 凭证匹配器 -->
    <!--    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher" >
            <property name="hashAlgorithmName" value="md5" />
            <property name="hashIterations" value="2" />
            <property name="storedCredentialsHexEncoded" value="false"/>
        </bean>-->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.SimpleCredentialsMatcher"/>
    <!-- realm -->
        <bean id="userRealm" class="com.hy.security.UserRealm">
            <property name="credentialsMatcher" ref="credentialsMatcher"/>
            <property name="cachingEnabled" value="true"/>
            <property name="cacheManager" ref="shiroCahe"/>
            <property name="authenticationCachingEnabled" value="false"/>
            <property name="authenticationCacheName" value="#{config['AUTHENT_CACHE_NAME']}"/>
            <property name="authorizationCachingEnabled" value="true"/>
            <property name="authorizationCacheName" value="#{config['AUTHOR_CACHE_NAME']}"/>
        </bean>

    <bean id="sessionDAO" class="com.hy.security.ShiroSessionDao">
        <property name="prefix" value="#{config['shiroSessionPrefix']}"/>
        <property name="redisCacheManager" ref="cacheManager"/>
        <property name="jedisPool" ref="jedisPool"/>
        <property name="cacheName" value="shiroSession"/>
        <!--<property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
    </bean>
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!--<property name="interval" value="3000"/>-->
        <property name="interval" value="#{config['sessionExpireTime']}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!--<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>-->

    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

<!--    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/>
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--<property name="globalSessionTimeout" value="3000"/>-->
        <property name="globalSessionTimeout" value="#{config['sessionExpireTime']}"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="cacheManager" ref="shiroCahe"/>
    </bean>

<!--    <bean id="formAuthenticationFilter" claCustomFormAuthenticationFilterlter">
        <property name="usernameParam" value="phone"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="false"/>
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/success"/>
        <property name="baseImpl" ref="baseImpl"/>
        <property name="userService" ref="userService"/>
    </bean>-->
    <bean id="sysUserFilter" class="com.hy.security.SysUserFilter" p:baseImpl-ref="baseImpl" p:jedisPool-ref="jedisPool" p:excludeReg="(.*/login$)|(^/manage/.+)"/>
    <bean id="filterChainManager" class="com.hy.security.CustomDefaultFilterChainManager" init-method="init">
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/success"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="customFilters">
            <util:map>
                <!--<entry key="authc" value-ref="formAuthenticationFilter"/>-->
                <entry key="sysUser" value-ref="sysUserFilter"/>
            </util:map>
        </property>
        <property name="defaultFilterChainDefinitions">
            <value>
                <!--/login = anon-->
                <!--/logout = logout-->
                <!--/unauthorized = authc-->
                <!--/manager/** = anon-->
                /druid/** = anon
                /** = sysUser
            </value>
        </property>
    </bean>
    <bean id="filterChainResolver" class="com.hy.security.CustomPathMatchingFilterChainResolver">
        <property name="customDefaultFilterChainManager" ref="filterChainManager"/>
    </bean>
    <!-- securityManager安全管理器 -->
    <!-- 配额securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm" />
        <!-- 注入缓存管理器 -->
        <property name="cacheManager" ref="shiroCahe"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <!--shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>

    <!-- web.xml中shiro的filter对应的bean -->
    <!-- Shiro 的Web过滤器 -->
<!--
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        &lt;!&ndash; loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 &ndash;&gt;
        <property name="loginUrl" value="/login"/>
        &lt;!&ndash; 认证成功统一跳转到ficontrollertion，建议不配置，shiro认证成功自动到上一个请求路径 &ndash;&gt;
        &lt;!&ndash;<property name="successUrl" value="/index.jsp"/>&ndash;&gt;
        &lt;!&ndash; 通过unauthorizedUrl指定没有权限操作时跳转页面&ndash;&gt;
        &lt;!&ndash;<property name="unauthorizedUrl" value="/sysPer/noperm" />&ndash;&gt;
        &lt;!&ndash;自定义filter配置 &ndash;&gt;
        &lt;!&ndash;<property name="filters">&ndash;&gt;
        &lt;!&ndash;<map>&ndash;&gt;
        &lt;!&ndash; 将自定义 的FormAuthenticationFilter注入shiroFilter中&ndash;&gt;
        &lt;!&ndash;<entry key="authc" value-ref="formAuthenticationFilter" />&ndash;&gt;
        &lt;!&ndash;</map>&ndash;&gt;
        &lt;!&ndash;</property>&ndash;&gt;

        &lt;!&ndash; 过虑器链定义，从上向下顺序执行，一般将/** 放在最下边 &ndash;&gt;
                &lt;!&ndash;商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 &ndash;&gt;
                &lt;!&ndash; /items/queryItcontrollertion = perms[item:query] &ndash;&gt;
                &lt;!&ndash;/sysuser/deleteUser = perms[user:delete]&ndash;&gt;
                &lt;!&ndash; 配置记住我或认证通过可以访问的地址 &ndash;&gt;
                &lt;!&ndash;/index.jsp  = user&ndash;&gt;
                &lt;!&ndash; /** = authc 所有url都必须认证通过才可以访问&ndash;&gt;
                &lt;!&ndash; 请求 logout地址，shiro去清除session&ndash;&gt;
                &lt;!&ndash; 对静态资源设置匿名访问 &ndash;&gt;
&lt;!&ndash;        <property name="filterChainDefinitions">
            <value>
                /styles/easyui/** = anon
                /scripts/easyui/** = anon
                /styles/** = anon
                /images/** = anon
                /logout = logout
                /login = anon
                /** = authc
            </value>
        </property>&ndash;&gt;
    </bean>
-->

    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" p:proxyTargetClass="true" p:exposeProxy="true"/>-->
<!--        <aop:config proxy-target-class="true" expose-proxy="true"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor" p:order="900">
        <property name="securityManager" ref="securityManager" />
    </bean>-->

<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/error/refuse</prop>
            </props>
        </property>
    </bean>-->
<!--    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="shiroFilter"/>
        <property name="targetMethod" value="setFilterChainResolver"/>
        <property name="arguments" ref="filterChainResolver"/>
    </bean>-->
</beans>